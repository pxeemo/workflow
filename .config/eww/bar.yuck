(deflisten win-title :initial "..." `bash ~/.config/eww/scripts/get-window-title`)
(defwidget window []
(box 
    (label :text "${win-title}")))


(defpoll music-song     :interval "1s"  "./scripts/music-info --song")
(defpoll music-artist   :interval "1s" `./scripts/music-info --artist`)
(defpoll music-perc     :interval "1s"  "./scripts/music-info --time")
(defpoll music-status   :interval "2s"  "./scripts/music-info --status")
(defpoll music-cover    :interval "1s"  "./scripts/music-info --cover")
(defvar  music-reveal   false)
(defwidget music []
(box :vexpand false :hexpand false :oreintation "h" :space-evenly false :class "song" :spacing 4
    (eventbox :onhover "eww update music-reveal=true"
            :onhoverlost "eww update music-reveal=false"
        (box :orientation "h" :space-evenly false
                :vexpand false :hexpand false
            (revealer :transition "slideleft"
                    :reveal music-reveal
                    :duration "250ms"
                (box :vexpand false :hexpand false :oreintation "h" :class "song-btn"
                    (button :onclick "./scripts/music-info --prev" "󰒮")))
            (circular-progress :value music-perc :thickness 4
                (box :class "song-cover-art" :style "background-image: url('${music-cover}');"
                    (revealer :transition "crossfade"
                            :reveal music-reveal
                            :duration "250ms"
                        (box :vexpand false :hexpand false :oreintation "h" :class "song-btn"
                            (button :onclick "./scripts/music-info --toggle" music-status)))))
            (revealer :transition "slideright"
                    :reveal music-reveal
                    :duration "250ms"
                (box :vexpand false :hexpand false :oreintation "h" :class "song-btn"
                    (button :onclick `./scripts/music-info --next` "󰒭")))))
    (button :wrap "true" 
            :onclick `if [[ $(eww windows | grep -o '*music') ]]; then eww close music; else eww open music; fi` 
            music-song)))


(deflisten workspaces :initial "[]" `bash ~/.config/eww/scripts/get-workspaces`)
(deflisten current_workspace :initial "1" `bash ~/.config/eww/scripts/get-active-workspace`)
(defwidget workspaces []
(eventbox :onscroll "./scripts/change-active-workspace {} ${current_workspace}" 
        :class "workspaces-widget"
    (box :space-evenly true :spacing 2
        (label :text "${workspaces}${current_workspace}" :visible false)
        (for workspace in workspaces
            (button :onclick "hyprctl dispatch workspace ${workspace.id}" :class "workspace-entry"
                (box :class "${workspace.id == current_workspace ? "current" : ""} ${workspace.urgent == "1" ? "urgent" : ""}"
                    (label :text {
                            workspace.id == current_workspace ? "󰮯" : 
                            workspace.urgent == "1"           ? "󰊠" : 
                                                                "󰇘" } 
                            :xalign 0.5)))))))


(defpoll net    :interval '5s' `nmcli --terse --fields SIGNAL,ACTIVE device wifi | awk -F: '{if($2=="yes")print$1}'`)
(defpoll essid  :interval '5s' :initial "N/A" `nmcli connection | awk '/wlp/{print$1}'`)
(defwidget network []
(box :class "circ-btn"
    (image :image-width "22"
            :path {
        net == '' ? './images/wifi-7.svg' :
        net < 14 ? './images/wifi-1.svg' :
        net < 29 ? './images/wifi-2.svg' :
        net < 43 ? './images/wifi-3.svg' :
        net < 57 ? './images/wifi-4.svg' :
        net < 71 ? './images/wifi-5.svg' :
        net < 86 ? './images/wifi-6.svg' :
                   './images/wifi-7.svg' }
        :tooltip '${essid} (${net}%)')))


(deflisten volperc `./scripts/get-volume`)
(defwidget volume []
(eventbox :onscroll `popslider volume {}; touch /tmp/volume-pop.lock`
    (box :class "circ-btn"
        (image :image-width "22"
                :path {
                    volperc == '[MUTED]' ? './images/volume-0.svg' :
                    volperc < 25 ? './images/volume-1.svg' :
                    volperc < 50 ? './images/volume-2.svg' :
                    volperc < 75 ? './images/volume-3.svg' :
                    './images/volume-4.svg'
                }
            :tooltip '${volperc}%'))))


(deflisten lightperc "./scripts/get-brightness")
(defwidget brightness []
(eventbox :onscroll `popslider brightness {}; touch /tmp/brightness-pop.lock`
    (box :class "circ-btn"
        (image :image-width '22'
                :path {
                    lightperc < 33 ? './images/light-60.svg' :
                    lightperc < 67 ? './images/light-120.svg' :
                    './images/light-180.svg'
                }
            :tooltip "${lightperc}%"))))


(deflisten powerstate "./scripts/get-power --state")
(deflisten powerperc "./scripts/get-power --percentage")
(defpoll powerdetails :interval '1m' `acpi | cut -d' ' -f5-`)
(defwidget power []
(box :class "circ-btn"
    (image :image-width "22"
            :tooltip '${powerperc}% ${powerstate == "1" ? "charging" : 
                "not charging"}${powerdetails != "" ? " (${powerdetails})" : ""}'
            :path {
                powerperc < 10 ? './images/battery-${powerstate}-10.svg' :
                powerperc < 20 ? './images/battery-${powerstate}-20.svg' :
                powerperc < 30 ? './images/battery-${powerstate}-30.svg' :
                powerperc < 40 ? './images/battery-${powerstate}-40.svg' :
                powerperc < 50 ? './images/battery-${powerstate}-50.svg' :
                powerperc < 60 ? './images/battery-${powerstate}-60.svg' :
                powerperc < 70 ? './images/battery-${powerstate}-70.svg' :
                powerperc < 80 ? './images/battery-${powerstate}-80.svg' :
                powerperc < 90 ? './images/battery-${powerstate}-90.svg' :
                powerperc < 99 ? './images/battery-${powerstate}-99.svg' :
                './images/battery-full.svg'
            })))


(deflisten layout "./scripts/get-keyboard")
(defwidget keyboard []
(button :onclick `hyprctl switchxkblayout at-translated-set-2-keyboard next` :class 'circ-btn'
    (image :image-width "22"
            :tooltip "${layout} layout"
            :path {
                layout == 'English (US)' ? './images/keyboard-en-layout.svg' : 
                layout == 'Persian'      ? './images/keyboard-fa-layout.svg' : 
                '??'
            })))


(defpoll time       :interval "1s" 'jdate +%R')
(defpoll weekday    :interval "5m" `jdate +%G`)
(defpoll dayofmonth :interval "5m" `jdate +%e\\ %V`)
(defvar  showdate   false)
(defwidget clock []
(eventbox
        :timeout        '50ms'
        :onhover        'eww update showdate=true'
        :onhoverlost    'eww update showdate=false'
    (box :space-evenly false :class "clock"
        (revealer :transition "slideleft" :reveal "${showdate}" :duration "200ms" :class "date"
            (overlay :width "56"
                (label :yalign 0 :xalign 1 :text "${weekday}")
                (label :yalign 1 :xalign 0 :text "${dayofmonth}")
                )
            )
        (label :text "${time}"))))

(defwidget bar []
(centerbox :class "bar"
    (box :space-evenly false
        (window)
        (music)
        )
    (workspaces)
    (box :space-evenly false :halign "end"
        (network)
        (volume)
        (brightness)
        (power)
        (keyboard)
        (clock)
        )))

(defwindow bar
    :exclusive true
    :monitor 0
    :geometry (geometry :x "0%" :y "0%"
        :width "100%" :height "36px" :anchor "top center")
    :stacking "fg"
    :focusable false
    :namespace "eww"
(bar))
