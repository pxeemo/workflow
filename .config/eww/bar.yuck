(deflisten win-title :initial "..." `bash ~/.config/eww/scripts/get-window-title`)
(defwidget window []
(box 
    (label :text "${win-title}")))


(defpoll song           :interval "2s"  "./scripts/music-info --song")
(defpoll song_artist    :interval "2s"  "./scripts/music-info --artist")
(defpoll current_status :interval "1s"  "./scripts/music-info --time")
(defpoll song_status    :interval "2s"  "./scripts/music-info --status")
(defpoll cover_art      :interval "2s"  "./scripts/music-info --cover")
(defvar music-reveal  false)
(defwidget music []
(box :vexpand false :hexpand false :oreintation "h" :space-evenly false :class "song" :spacing 4
    (eventbox :onhover "eww update music-reveal=true"
            :onhoverlost "eww update music-reveal=false"
        (box :orientation "h" :space-evenly false
                :vexpand false :hexpand false
            (revealer :transition "slideleft"
                    :reveal music-reveal
                    :duration "250ms"
                (box :vexpand false :hexpand false :oreintation "h" :class "song-btn"
                    (button :onclick "./scripts/music-info --prev" "󰒮")))
            (circular-progress :value current_status :thickness 4
                (box :class "song-cover-art" :style "background-image: url('${cover_art}');"
                    (revealer :transition "crossfade"
                            :reveal music-reveal
                            :duration "250ms"
                        (box :vexpand false :hexpand false :oreintation "h" :class "song-btn"
                            (button :onclick "./scripts/music-info --toggle" song_status)))))
            (revealer :transition "slideright"
                    :reveal music-reveal
                    :duration "250ms"
                (box :vexpand false :hexpand false :oreintation "h" :class "song-btn"
                    (button :onclick `./scripts/music-info --next` "󰒭")))))
    (button :wrap "true" :onclick `./scripts/pop music` song)))


(deflisten workspaces :initial "[]" `bash ~/.config/eww/scripts/get-workspaces`)
(deflisten current_workspace :initial "1" `bash ~/.config/eww/scripts/get-active-workspace`)
(defwidget workspaces []
(eventbox :onscroll "./scripts/change-active-workspace {} ${current_workspace}" 
        :class "workspaces-widget"
    (box :space-evenly true :spacing 2
        (label :text "${workspaces}${current_workspace}" :visible false)
        (for workspace in workspaces
            (button :onclick "hyprctl dispatch workspace ${workspace.id}" :class "workspace-entry"
                (box :class "${workspace.id == current_workspace ? "current" : ""} ${workspace.urgent == "1" ? "urgent" : ""}"
                    (label :text {
                            workspace.id == current_workspace ? "󰮯" : 
                            workspace.urgent == "1" ? "󰊠" : 
                            "󰇘"
                        } 
                            :xalign 0.5)))))))


(deflisten volperc `./scripts/get-volume`)
(defwidget volume []
(label :text {
        volperc == '[MUTED]' ? '󰝟 Mute' : 
        volperc < 33 ? '󰕿 ${volperc}%' :
        volperc < 66 ? '󰖀 ${volperc}%' :
        '󰕾 ${volperc}%'
    }))


(defpoll net    :interval '5s' `nmcli --terse --fields SIGNAL,ACTIVE device wifi | awk -F: '{if($2=="yes")print$1}'`)
(defpoll essid  :interval '5s' :initial "N/A" `nmcli connection | awk '/wlp/{print$1}'`)
(defwidget network []
(label :text  {
        net == '' ? '󰤨' :
        net < 26 ? '󰤟' :
        net < 51 ? '󰤢' :
        net < 76 ? '󰤥' :
        '󰤨' }
        :tooltip '${essid} (${net}%)'))


(deflisten lightperc "./scripts/get-brightness")
(defwidget brightness []
(label :text   {
            lightperc < 33 ? '󰃜 ${lightperc}%' :
            lightperc < 67 ? '󰃛 ${lightperc}%' :
            '󰃚 ${lightperc}%'
        }))


(deflisten powerstate "./scripts/get-power --state")
(deflisten powerperc "./scripts/get-power --percentage")
(defwidget power []
(label :text   {
            powerperc < 10 ? '󰁺 ${powerperc}%' :
            powerperc < 20 ? '󰁻 ${powerperc}%' :
            powerperc < 30 ? '󰁼 ${powerperc}%' :
            powerperc < 40 ? '󰁽 ${powerperc}%' :
            powerperc < 50 ? '󰁾 ${powerperc}%' :
            powerperc < 60 ? '󰁿 ${powerperc}%' :
            powerperc < 70 ? '󰂀 ${powerperc}%' :
            powerperc < 80 ? '󰂁 ${powerperc}%' :
            powerperc < 90 ? '󰂂 ${powerperc}%' :
            '󰁹 ${powerperc}%'
        }
        :tooltip '${powerstate}'))


(deflisten layout "./scripts/get-keyboard")
(defwidget keyboard []
(button :onclick `hyprctl switchxkblayout at-translated-set-2-keyboard next` :class 'circ-btn'
    (image :path {
            layout == 'English (US)' ? './images/en-layout.svg' : 
            layout == 'Persian' ? './images/fa-layout.svg' : 
            '??'
        }
            :image-width "16")))


(defpoll time       :interval "1s" 'jdate +%R')
(defpoll weekday    :interval "5m" `jdate +%G`)
(defpoll dayofmonth :interval "5m" `jdate +%e\\ %V`)
(defvar showdate false)
(defwidget clock []
(eventbox :class "clock"
        :timeout        '50ms'
        :onhover        'eww update showdate=true'
        :onhoverlost    'eww update showdate=false'
    (box :space-evenly false
        (revealer :transition "slideleft" :reveal "${showdate}" :duration "200ms" :class "date"
            (overlay
                (label :yalign 0 :xalign 1 :text "${weekday}")
                (label :yalign 1 :xalign 1 :text "${dayofmonth}")
                )
            )
        (label :text "${time}"))))

(defwidget bar []
(centerbox :class "bar"
    (box :space-evenly false
        (window)
        (music)
        )
    (workspaces)
    (box :space-evenly false :halign "end" :spacing "10"
        (network)
        (volume)
        (brightness)
        (power)
        (keyboard)
        (clock))))

(defwindow bar
    :exclusive true
    :monitor 0
    :geometry (geometry :x "0%" :y "0%"
        :width "100%" :height "36px" :anchor "top center")
    :stacking "fg"
    :focusable false
    :namespace "eww"
(bar))
